enum CacheControlScope {
  PUBLIC
  PRIVATE
}

directive @cacheControl(
  maxAge: Int
  scope: CacheControlScope
  inheritMaxAge: Boolean
) on FIELD_DEFINITION | OBJECT | INTERFACE | UNION

type Market {
  id: String!
  symbol: String!
  baseAsset: String!
  quoteAsset: String!
  name: String
  status: String
  minTradeSize: Float
}

type Summary {
  id: String!
  symbol: String!
  high: Float
  low: Float
  volume: Float
  quoteVolume: Float
  percentChange: Float
}

type Ticker {
  id: String!
  price: String!
}

type Metadata @cacheControl(maxAge: 604800) {
  id: String!
  metadataId: Float
  name: String
  symbol: String
  slug: String
  description: String
  logo: String
  urls: MetadataUrls
}

type MetadataUrls {
  website: [String]
  twitter: [String]
  chat: [String]
  message_board: [String]
  explorer: [String]
  reddit: [String]
  technical_doc: [String]
  source_code: [String]
  announcement: [String]
}

type Count {
  name: String!
  count: Float!
}

type Pair {
  ask: String
  bid: String
  last_trade: String
  pair: String
  rolling_24_hour_volume: String
  status: String
  timestamp: Float
}

type Order {
  _id: ID
  amount: String
  total: String
  symbol: String
  email: String
  pin: String
  isPaid: Boolean
  isPending: Boolean
  isWithdrawn: Boolean
  isCancelled: Boolean
  wallet: String
  reference: String
  timestamp: String
}

input OrderInput {
  amount: String
  total: String
  symbol: String
  email: String
  pin: String
  isPaid: Boolean
  isPending: Boolean
  isWithdrawn: Boolean
  isCancelled: Boolean
  wallet: String
  reference: String
}

# The "Query" type is special: it lists all of the available queries that
# clients can execute, along with the return type for each. In this
type Query {
  markets(offset: Int, limit: Int, term: String, symbols: String): [Market!]
  market(id: String): Market!
  metaCoin(id: String): Metadata!
  metaCoinAll: [Metadata!]
  metaExperiment: [Metadata!]
  metaInfo: [Metadata!]
  summary(id: String): Summary!
  tickers(symbols: String): [Ticker!]
  ticker(id: String): Ticker!
  count: [Count!]
  pair(pair: String): Pair!
  getOrders: [Order!]
  getOrder(id: String): Order
}

type Mutation {
  createOrder(amount: String, total: String, symbol: String): Order!
  updateOrder(id: String, input: OrderInput): Order!
}
